#exrcie1:
class Pets():
    def __init__(self, animals):
        self.animals = animals

    def walk(self):
        for animal in self.animals:
            print(animal.walk())

class Cat():
    is_lazy = True
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def walk(self):
        return f'{self.name} is just walking around'

class Bengal(Cat):
    def sing(self, sounds):
        return f'{sounds}'

class Chartreux(Cat):
    def sing(self, sounds):
        return f'{sounds}'
class Siamese(Cat):
    def sing(self, sounds):
        return f'{sounds}'
bengal_cat = Bengal("Simba", 3)
chartreux_cat = Chartreux("Luna", 5)
siamese_cat = Siamese("Milo", 2)
all_cats = [bengal_cat, chartreux_cat, siamese_cat]
sara_pets = Pets(all_cats)
sara_pets.walk()
#exrcie2:

class Dog:
    def __init__(self, name, age, weight):
        self.name = name
        self.age = age
        self.weight = weight
    def bark(self):
        return f"{self.name} is barking!"
    
    def run_speed(self):
        return (self.weight / self.age) * 10
    def fight(self, other_dog):
        my_score = self.run_speed() * self.weight
        other_score = other_dog.run_speed() * other_dog.weight
        if my_score > other_score:
            return f"{self.name} won !"
        elif my_score < other_score:
            return f"{other_dog.name} won !"
        else:
            return "*****!"
dog1 = Dog("Buddy", 5, 20)
dog2 = Dog("Max", 3, 25)      
#exrcie3:# mhtajitsh n importey hit khdmhtm fnfss lfile
import random
class PetDog(Dog):
    def __init__(self, name, age, weight, breed):
        super().__init__(name, age, weight)
        self.trained = False
        self.breed= breed
    def train(self):
        print(self.bark())
        self.trained = True
    def play ( self,*dog_names):
        all_names=[self.name]+list(dog_names)
        print(f"{self.name} is playing with {', '.join(all_names)}")
    def do_a_trick(self):
        if self.trained:
            tricks = [
                f"{self.name} does a barrel roll.",
                f"{self.name} stands on his back legs.",
                f"{self.name} shakes your hand.",
                f"{self.name} plays dead.",
            ]
            print(random.choice(tricks))
        else:
            print(f"{self.name} is not trained to do tricks yet.")
#exercice4   
class Family:
    def __init__(self, last_name, members=None):
        self.last_name = last_name
        self.members = members if members else []

    def born(self, **kwargs):
        self.members.append(kwargs)
        print(f"Congratulations to the {self.last_name} family on the birth of {kwargs.get('name', 'a child')}!")

    def is_18(self, name):
        for member in self.members:
            if member['name'] == name:
                return member['age'] > 18
        return False

    def family_presentation(self):
        print(f"Family name: {self.last_name}")
        print("Members:")
        for member in self.members:
            print(member)
#exercice5
class TheIncredibles(Family):
    def use_power(self, name):
        for member in self.members:
            if member['name'] == name:
                if member['age'] > 18:
                    print(f"{member['incredible_name']}'s power is: {member['power']}")
                else:
                    raise Exception(f"{member['name']} is not over 18 years old and cannot use their power.")
                return
        print(f"No member named {name} found.")

    def incredible_presentation(self):
        print("Here is our powerful family **")
        super().family_presentation()
        print("Incredible details:")
        for member in self.members:
            print(f"{member['name']} aka {member['incredible_name']} - Power: {member['power']}")


incredible_members = [
    {'name':'Michael','age':35,'gender':'Male','is_child':False,'power': 'fly','incredible_name':'MikeFly'},
    {'name':'Sarah','age':32,'gender':'Female','is_child':False,'power': 'read minds','incredible_name':'SuperWoman'}
]

incredibles_family = TheIncredibles("Incredibles", incredible_members)
incredibles_family.incredible_presentation()
incredibles_family.born(
    name="Jack", age=1, gender="Male", is_child=True, power="Unknown Power", incredible_name="BabyJack"
)

incredibles_family.incredible_presentation()